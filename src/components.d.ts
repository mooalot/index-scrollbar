/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface IndexScrollbar {
        "alphabet": Array<string>;
        "disableInvalidLetters": boolean;
        "exactX": boolean;
        "letterMagnification": boolean;
        "letterSpacing": number | string | null;
        "magnificationCurve": Array<number>;
        "magnificationMultiplier": number;
        "magnifyDividers": boolean;
        "navigateOnHover": boolean;
        "overflowDivider": string | undefined | null;
        "prioritizeHidingInvalidLetters": boolean;
        "validLetters": string[];
    }
}
export interface IndexScrollbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIndexScrollbarElement;
}
declare global {
    interface HTMLIndexScrollbarElementEventMap {
        "letterChange": string;
        "isActive": boolean;
    }
    interface HTMLIndexScrollbarElement extends Components.IndexScrollbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIndexScrollbarElementEventMap>(type: K, listener: (this: HTMLIndexScrollbarElement, ev: IndexScrollbarCustomEvent<HTMLIndexScrollbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIndexScrollbarElementEventMap>(type: K, listener: (this: HTMLIndexScrollbarElement, ev: IndexScrollbarCustomEvent<HTMLIndexScrollbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIndexScrollbarElement: {
        prototype: HTMLIndexScrollbarElement;
        new (): HTMLIndexScrollbarElement;
    };
    interface HTMLElementTagNameMap {
        "index-scrollbar": HTMLIndexScrollbarElement;
    }
}
declare namespace LocalJSX {
    interface IndexScrollbar {
        "alphabet"?: Array<string>;
        "disableInvalidLetters"?: boolean;
        "exactX"?: boolean;
        "letterMagnification"?: boolean;
        "letterSpacing"?: number | string | null;
        "magnificationCurve"?: Array<number>;
        "magnificationMultiplier"?: number;
        "magnifyDividers"?: boolean;
        "navigateOnHover"?: boolean;
        "onIsActive"?: (event: IndexScrollbarCustomEvent<boolean>) => void;
        "onLetterChange"?: (event: IndexScrollbarCustomEvent<string>) => void;
        "overflowDivider"?: string | undefined | null;
        "prioritizeHidingInvalidLetters"?: boolean;
        "validLetters"?: string[];
    }
    interface IntrinsicElements {
        "index-scrollbar": IndexScrollbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "index-scrollbar": LocalJSX.IndexScrollbar & JSXBase.HTMLAttributes<HTMLIndexScrollbarElement>;
        }
    }
}
